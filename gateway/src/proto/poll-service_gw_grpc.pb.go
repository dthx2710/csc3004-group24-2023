// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0--rc3
// source: poll-service_gw.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Poll_CreatePoll_FullMethodName  = "/poll_service.Poll/CreatePoll"
	Poll_DeletePoll_FullMethodName  = "/poll_service.Poll/DeletePoll"
	Poll_GetPoll_FullMethodName     = "/poll_service.Poll/GetPoll"
	Poll_GetAllPolls_FullMethodName = "/poll_service.Poll/GetAllPolls"
)

// PollClient is the client API for Poll service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollClient interface {
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error)
	DeletePoll(ctx context.Context, in *DeletePollRequest, opts ...grpc.CallOption) (*DeletePollResponse, error)
	GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error)
	GetAllPolls(ctx context.Context, in *GetAllPollRequest, opts ...grpc.CallOption) (*GetAllPollResponse, error)
}

type pollClient struct {
	cc grpc.ClientConnInterface
}

func NewPollClient(cc grpc.ClientConnInterface) PollClient {
	return &pollClient{cc}
}

func (c *pollClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error) {
	out := new(CreatePollResponse)
	err := c.cc.Invoke(ctx, Poll_CreatePoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollClient) DeletePoll(ctx context.Context, in *DeletePollRequest, opts ...grpc.CallOption) (*DeletePollResponse, error) {
	out := new(DeletePollResponse)
	err := c.cc.Invoke(ctx, Poll_DeletePoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollClient) GetPoll(ctx context.Context, in *GetPollRequest, opts ...grpc.CallOption) (*GetPollResponse, error) {
	out := new(GetPollResponse)
	err := c.cc.Invoke(ctx, Poll_GetPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollClient) GetAllPolls(ctx context.Context, in *GetAllPollRequest, opts ...grpc.CallOption) (*GetAllPollResponse, error) {
	out := new(GetAllPollResponse)
	err := c.cc.Invoke(ctx, Poll_GetAllPolls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollServer is the server API for Poll service.
// All implementations must embed UnimplementedPollServer
// for forward compatibility
type PollServer interface {
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error)
	DeletePoll(context.Context, *DeletePollRequest) (*DeletePollResponse, error)
	GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error)
	GetAllPolls(context.Context, *GetAllPollRequest) (*GetAllPollResponse, error)
	mustEmbedUnimplementedPollServer()
}

// UnimplementedPollServer must be embedded to have forward compatible implementations.
type UnimplementedPollServer struct {
}

func (UnimplementedPollServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedPollServer) DeletePoll(context.Context, *DeletePollRequest) (*DeletePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoll not implemented")
}
func (UnimplementedPollServer) GetPoll(context.Context, *GetPollRequest) (*GetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (UnimplementedPollServer) GetAllPolls(context.Context, *GetAllPollRequest) (*GetAllPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPolls not implemented")
}
func (UnimplementedPollServer) mustEmbedUnimplementedPollServer() {}

// UnsafePollServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollServer will
// result in compilation errors.
type UnsafePollServer interface {
	mustEmbedUnimplementedPollServer()
}

func RegisterPollServer(s grpc.ServiceRegistrar, srv PollServer) {
	s.RegisterService(&Poll_ServiceDesc, srv)
}

func _Poll_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Poll_CreatePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poll_DeletePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).DeletePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Poll_DeletePoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).DeletePoll(ctx, req.(*DeletePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poll_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Poll_GetPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).GetPoll(ctx, req.(*GetPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poll_GetAllPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServer).GetAllPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Poll_GetAllPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServer).GetAllPolls(ctx, req.(*GetAllPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Poll_ServiceDesc is the grpc.ServiceDesc for Poll service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Poll_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poll_service.Poll",
	HandlerType: (*PollServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoll",
			Handler:    _Poll_CreatePoll_Handler,
		},
		{
			MethodName: "DeletePoll",
			Handler:    _Poll_DeletePoll_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _Poll_GetPoll_Handler,
		},
		{
			MethodName: "GetAllPolls",
			Handler:    _Poll_GetAllPolls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poll-service_gw.proto",
}
